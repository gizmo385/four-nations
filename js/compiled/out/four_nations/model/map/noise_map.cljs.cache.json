["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$four-nations.model.map.noise-map","~:imports",null,"~:requires",["^ ","~$four-nations.general.types","^9","~$utils","~$four-nations.general.utils","^;","^;","~$map-utils","~$four-nations.model.map.utils","^=","^="],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$->Point","^9","~$->MapTile","^9","~$->Dimension","^9"],"~:defs",["^ ","~$generate-points",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/gizmo/workspace/four-nations/src/four_nations/model/map/noise_map.cljs","~:line",8,"~:column",7,"~:end-line",8,"~:end-column",22,"~:arglists",["~#list",["~$quote",["^M",[["~$dim"],["^O","~$value-fn"]]]]],"~:doc","Given a specified dimension, generates a mapping from coordinates to map tiles with that\n   dimension.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^O"],["^O","^P"]],"^L",["^M",[["^O"],["^O","^P"]]],"~:arglists-meta",["^M",[null,null]]]],"^5","~$four-nations.model.map.noise-map/generate-points","^G","src/four_nations/model/map/noise_map.cljs","^K",22,"^R",["^ ","^S",false,"^T",2,"^U",2,"^V",[["^O"],["^O","^P"]],"^L",["^M",[["^O"],["^O","^P"]]],"^W",["^M",[null,null]]],"^V",[["^O"],["^O","^P"]],"~:protocol-impl",null,"^T",2,"^W",["^M",[null,null]],"^I",1,"^S",false,"~:methods",[["^ ","^T",1,"^S",false,"~:tag","~$any"],["^ ","^T",2,"^S",false,"^[",["^4",[null,"~$clj","^10"]]]],"^H",8,"^J",8,"^U",2,"~:fn-var",true,"^L",["^M",[["^O"],["^O","^P"]]],"^Q","Given a specified dimension, generates a mapping from coordinates to map tiles with that\n   dimension."],"~$generate-2d-noise",["^ ","^E",null,"^F",["^ ","^G","/home/gizmo/workspace/four-nations/src/four_nations/model/map/noise_map.cljs","^H",22,"^I",7,"^J",22,"^K",24,"^L",["^M",["^N",["^M",[["^O"]]]]],"^Q","Given a height and a width, generates a two-dimensional array of noise, where each cell is\n   occupied by a number between 1 and 255 (inclusive on both sides)."],"^5","~$four-nations.model.map.noise-map/generate-2d-noise","^G","src/four_nations/model/map/noise_map.cljs","^K",24,"^V",["^M",[["^O"]]],"^Y",null,"^W",["^M",[null,null]],"^I",1,"^S",false,"^H",22,"^J",22,"^U",1,"^12",true,"^L",["^M",["^N",["^M",[["^O"]]]]],"^Q","Given a height and a width, generates a two-dimensional array of noise, where each cell is\n   occupied by a number between 1 and 255 (inclusive on both sides)."],"~$average-of-neighbors",["^ ","^E",null,"^F",["^ ","^G","/home/gizmo/workspace/four-nations/src/four_nations/model/map/noise_map.cljs","^H",29,"^I",7,"^J",29,"^K",27,"^L",["^M",["^N",["^M",[["~$noise","~$dimension","~$point"]]]]],"^Q","Given a 2-dimensional array of noise, a height, width, and a cell coordinate, calculates the\n   average of the values of its neighbor cells"],"^5","~$four-nations.model.map.noise-map/average-of-neighbors","^G","src/four_nations/model/map/noise_map.cljs","^K",27,"^V",["^M",[["^16","^17","^18"]]],"^Y",null,"^W",["^M",[null,null]],"^I",1,"^S",false,"^H",29,"~:ret-tag","~$number","^J",29,"^U",3,"^12",true,"^L",["^M",["^N",["^M",[["^16","^17","^18"]]]]],"^Q","Given a 2-dimensional array of noise, a height, width, and a cell coordinate, calculates the\n   average of the values of its neighbor cells"],"~$average-2d-noise",["^ ","^E",null,"^F",["^ ","^G","/home/gizmo/workspace/four-nations/src/four_nations/model/map/noise_map.cljs","^H",38,"^I",7,"^J",38,"^K",23,"^L",["^M",["^N",["^M",[["^17","^16"]]]]],"^Q","Given a 2-dimensional array of noise, returns a 2-dimensional array of averaged noise, where the\n   value of each cell is the average of the values of its neighbors."],"^5","~$four-nations.model.map.noise-map/average-2d-noise","^G","src/four_nations/model/map/noise_map.cljs","^K",23,"^V",["^M",[["^17","^16"]]],"^Y",null,"^W",["^M",[null,null]],"^I",1,"^S",false,"^H",38,"^1:",["^4",[null,"^11","^10"]],"^J",38,"^U",2,"^12",true,"^L",["^M",["^N",["^M",[["^17","^16"]]]]],"^Q","Given a 2-dimensional array of noise, returns a 2-dimensional array of averaged noise, where the\n   value of each cell is the average of the values of its neighbors."],"~$smooth-noisemap",["^ ","^E",null,"^F",["^ ","^G","/home/gizmo/workspace/four-nations/src/four_nations/model/map/noise_map.cljs","^H",47,"^I",7,"^J",47,"^K",22,"^L",["^M",["^N",["^M",[["^16","^17","~$smoothing-passes"]]]]],"^Q","Given a smooth map, smoothes that map by averaging cell values with neighbors the specified number\n   of times."],"^5","~$four-nations.model.map.noise-map/smooth-noisemap","^G","src/four_nations/model/map/noise_map.cljs","^K",22,"^V",["^M",[["^16","^17","^1?"]]],"^Y",null,"^W",["^M",[null,null]],"^I",1,"^S",false,"^H",47,"^1:",["^4",["^10","~$clj-nil"]],"^J",47,"^U",3,"^12",true,"^L",["^M",["^N",["^M",[["^16","^17","^1?"]]]]],"^Q","Given a smooth map, smoothes that map by averaging cell values with neighbors the specified number\n   of times."],"~$generate-noisemap",["^ ","^E",null,"^F",["^ ","^G","/home/gizmo/workspace/four-nations/src/four_nations/model/map/noise_map.cljs","^H",55,"^I",7,"^J",55,"^K",24,"^L",["^M",["^N",["^M",[["^17"],["^17","^1?"]]]]],"^Q","Given a dimension, generates a 2-dimensional map of averaged noise, which can be used for\n   procedural terrain generation. You can optionally supply the number of times that the noise will\n   be smoothed out (defaults to only a single smoothing pass).","^R",["^ ","^S",false,"^T",2,"^U",2,"^V",[["^17"],["^17","^1?"]],"^L",["^M",[["^17"],["^17","^1?"]]],"^W",["^M",[null,null]]]],"^5","~$four-nations.model.map.noise-map/generate-noisemap","^G","src/four_nations/model/map/noise_map.cljs","^K",24,"^R",["^ ","^S",false,"^T",2,"^U",2,"^V",[["^17"],["^17","^1?"]],"^L",["^M",[["^17"],["^17","^1?"]]],"^W",["^M",[null,null]]],"^V",[["^17"],["^17","^1?"]],"^Y",null,"^T",2,"^W",["^M",[null,null]],"^I",1,"^S",false,"^Z",[["^ ","^T",1,"^S",false,"^[","^10"],["^ ","^T",2,"^S",false,"^[",["^4",["^10","^1A"]]]],"^H",55,"^J",55,"^U",2,"^12",true,"^L",["^M",[["^17"],["^17","^1?"]]],"^Q","Given a dimension, generates a 2-dimensional map of averaged noise, which can be used for\n   procedural terrain generation. You can optionally supply the number of times that the noise will\n   be smoothed out (defaults to only a single smoothing pass)."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:value","~:width","~:height"]],"~:order",["^1J","^1I","^1H"]],"^Q",null]